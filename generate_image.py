import webuiapi
import json
import os
from time import time

# default output location, change if you want to use a different one
OUTPUT_DIRECTORY = os.path.join(os.getcwd(), "output")

start_time = time()
# connecting to the API
api = webuiapi.WebUIApi(port=7861) # --nowebui uses 7861, --api uses 7860

# looping through all the people in the output directory if they are not hidden
for person in os.listdir(OUTPUT_DIRECTORY):
    if person[0] != '.':
        # loading the biography.json file and generating the image
        with open(f"{OUTPUT_DIRECTORY}/{person}/biography.json", "r") as biography:
            biography_dict = json.load(biography)
            # this prompt is a bit complex, so I'll explain it at the end
            selfie = api.txt2img(prompt=f"photo of, upper body, best quality, ultra-detailed, [analog style, dslr] (look at viewer:1.2) (skin texture) (film grain:1.1), diffused shadows, (warm hue, warm tone:1.2), ultra high res, best shadow, RAW, realistic, photorealistic, indoors, blank walls, simple background, {biography_dict['Body Shape']} body, close up, soft smile, wearing {biography_dict['Favorite Color']} (business suit),1 ((upper body selfie)) adult ({biography_dict['Gender']}), (({biography_dict['Age']} years old)), ({biography_dict['Ethnicity']} {biography_dict['Nationality']}), {biography_dict['Hair Color']} {biography_dict['Hair Style']} hair, BREAK {biography_dict['Eye Color']} Eyes, ({biography_dict['Gender']})", negative_prompt="BadDream, (UnrealisticDream:1.2), hands, (iphone:1.1), (nsfw), cleavage, extra limbs, amputee", cfg_scale=10, sampler_index="DPM++ SDE Karras", width=540, height=960, steps=35, enable_hr=True, denoising_strength=0.55,hr_second_pass_steps=35, hr_scale=2, restore_faces=True, hr_upscaler="R-ESRGAN 4x+", alwayson_scripts={"ADetailer": {"args": [True, {"ad_model": "person_yolov8n-seg.pt", "ad_restore_face": True, "ad_steps": 35}]}})
            filename = f"{OUTPUT_DIRECTORY}/{person}/photo.png"
            selfie.image.save(filename, "PNG")
            print(f"Finished generating image for {person}!")

print(f"All images generated! Took {(time() - start_time) // 60} minutes and {(time() - start_time) % 60} seconds.")

"""
    There's three main parts to this prompt:
        1. The first part is the description of the person, which varies based on the contents of the JSON file.
        2. The second part is the image generation settings, which are the same for every image.
        3. The final part is the upscaling and restoration settings, which are also the same for every image.
    When using Stable Diffusion, there's a prompt length of about 75 tokens. Thankfully, the stable-diffusion-webui tool has some clever tricks to get around this limit, and as a consequence you can layer multiple prompts together to get a slightly more nuanced output image. 
    The BREAK keyword pads the remaining tokens with spaces, so that the next prompt is treated as its own set of inputs. I'm taking advantage of this to help isolate things like hair color and eye color, which are not always correctly generated by the model.
    The negative prompts primarily use Textual Inversions (if you're unfamiliar, they're like a whole set of tokens packaged into a single phrase), but the rest are just to avoid some consistent flaws I've noticed in the model's output.
    The image generation settings have been tweaked to try and mimic a smartphone selfie, and through testing I found that the DPM++ SDE Karras sampler performed best - but other DPM samplers should work as well.
    The hi-res upscaling works as a way to get a 1080p image within the constraints of how Stable Diffusion models are trained (512x512 is generally where you're supposed to work, but certain models like Absolute Reality can handle different aspect ratios close to that), as iPhone cameras output vertical images at 1080x1920. The R-ESRGAN 4x+ upscaler is the best one I've found for this purpose, but most ESRGAN models work well.
    Finally, I'm using the ADetailer script to assist with avoiding anything unnatural. You can get reasonable results without it, but it's a good idea to use it if you can.
"""